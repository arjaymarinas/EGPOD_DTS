<%- include('partials/header') %>

<div class="container bg-body-tertiary min-vh-100 pt-5">
    <div class="p-5 text-center bg-body-tertiary rounded-3">
        <!--<svg class="bi mt-4 mb-3" style="color: var(--bs-indigo);" width="100" height="100"><use xlink:href="#bootstrap"></use></svg>-->
        <h1 class="text-body-emphasis mt-4">EGP Document Tracking and Repository</h1>
        <p class="col-lg-8 mx-auto fs-5 text-muted">
          Search document or create a new one.
        </p>
        <div class="input-group mb-3 px-5 py-3">
            <input type="text" class="form-control rounded-4 ps-4 fs-5" id="searchDocumentInput" aria-label="Text input with dropdown button" placeholder="Search documents ..." style="height: 60px;">
            <!--<button class="btn btn-outline-secondary dropdown-toggle rounded-end-pill pe-4" id="dropdownButton" type="button" data-bs-toggle="dropdown" aria-expanded="false">Search by</button>
            <ul class="dropdown-menu dropdown-menu-end">
                <li><a class="dropdown-item" data-value="Name" href="#">Name</a></li>
                <li><a class="dropdown-item" href="#" data-value="Status">Status</a></li>
                <li><a class="dropdown-item" href="#" data-value="Department">Department</a></li>
                <li><hr class="dropdown-divider"></li>
                <li><a class="dropdown-item" href="#">Create New</a></li>
            </ul>-->
            <ul id="searchSuggestionsList" class="list-group position-absolute rounded" style="z-index: 1050; overflow-y: auto; display: none; top: 78px;"></ul>
        </div>
        <div class="d-inline-flex gap-2 mb-4">
          <a href="/masterlist" class="d-inline-flex align-items-center btn btn-primary px-3 rounded-pill">
            Browse documents
          </a>
          <button class="d-inline-flex align-items-center btn btn-outline-secondary px-3 rounded-pill" data-bs-toggle="modal" data-bs-target="#modalCreateNew" type="button">
            Create new
          </button>
          
        </div>
    </div>
</div>

<div class="modal fade p-4 py-md-5" id="modalCreateNew" tabindex="-1" role="dialog" aria-labelledby="modalCreateNew" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
      <div class="modal-content rounded-4 shadow">
        <div class="modal-header p-5 pb-4 border-bottom-0">
          <h1 class="fw-bold mb-0 fs-2">Create New</h1>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body p-5 pt-0">
          <form id="createDocumentForm" method="POST">
            <div class="row">
                <div class="col-4">
                    <div class="form-floating mb-3">
                        <input name="documentCode" type="text" class="form-control rounded-3" id="documentCodeInput">
                        <label for="documentCodeInput">Document Code</label>
                    </div>
                </div>
                <div class="col-8">
                    <div class="form-floating mb-3">
                        <select name="documentOrigin" class="form-control rounded-3" id="documentOriginInput">
                            <option value="">-- --</option>
                            <% departments.forEach(department => { %>
                                <option value="<%= department.id %>"><%= department.name + " (" + department.code + ")" %></p>
                            <% }); %>
                        </select>
                        <label for="documentOriginInput">Document Origin</label>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-4">
                    <div class="form-floating mb-3">
                        <select name="documentInOut" class="form-control rounded-3" id="documentEntryInput">
                            <option value="">-- --</option>
                            <option value="in">Incoming</option>
                            <option value="out">Outgoing</option>
                        </select>
                        <label for="documentEntryInput">Entry Type</label>
                    </div>
                </div>
                <div class="col-8">
                    <div class="form-floating mb-3 dropdown">
                        <select name="documentCategory" class="form-control rounded-3" id="documentCategoryMultiSelect" multiple>   
                            <% categories.forEach(category => { %>
                                <option value="<%= category.id %>"><%= category.name %></p>
                            <% }); %>
                        </select>
                        <label for="documentCategoryMultiSelect" style="padding-top: 4px; font-size: 14px; color: rgb(20 20 20 / 65%);">Document Category</label>
                    </div>                        
                </div>
            </div>
            <div class="form-floating mb-3">
                <input name="documentTitle" type="text" class="form-control rounded-3" id="documentTitleInput">
                <label for="documentTitleInput">Document Title</label>
            </div>
            <div class="form-floating mb-3">
                <textarea name="documentDesc" class="form-control" placeholder="Leave a comment here" id="documentDescInput" style="height: 150px;"></textarea>
                <label for="documentDescInput">Description</label>
            </div>
            <div class="row">
                <div class="col-4">
                    <div class="form-floating mb-3 dropdown">
                        <input name="documentDateTime" type="datetime-local" class="form-control rounded-3" id="dateTimeInput">
                        <label for="dateTimeInput">Date & Time (In/Out)</label>
                    </div>
                </div>
                <div class="col-8">
                    <div class="form-floating mb-3 dropdown">
                        <label for="documentActionRequestMultiSelect" style="padding-top: 4px; font-size: 14px; color: rgb(20 20 20 / 65%);">Request Action Category</label>
                        <select name="documentActionRequest" class="form-control rounded-3" id="documentActionRequestMultiSelect" multiple>   
                            <% actionCategories.forEach(actionCategory => { %>
                                <option value="<%= actionCategory.id %>"><%= actionCategory.name %></p>
                            <% }); %>
                        </select>
                    </div>   
                </div>
            </div>                     
            <button class="w-100 mb-2 btn rounded-3 btn-primary" id="saveDocumentBtn" type="submit">Save</button>
            <!--<small class="text-body-secondary">By clicking Sign up, you agree to the terms of use.</small>-->
          </form>
        </div>
      </div>
    </div>
</div>

<div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div id="successDocumentToast" class="toast text-bg-success" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header text-bg-success">
            <strong class="me-auto">Success</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">
            Document successfully created.
        </div>
    </div>
</div>

<div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div id="failedDocumentToast" class="toast text-bg-failed" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header text-bg-failed">
            <strong class="me-auto">Success</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">
            Document successfully created.
        </div>
    </div>
</div>

<script>

    // Add event listener to update button text on dropdown item click
    document.querySelectorAll('.dropdown-menu .dropdown-item').forEach(item => {
        item.addEventListener('click', function (event) {
            event.preventDefault(); // Prevent default link behavior
            const selectedValue = this.getAttribute('data-value'); // Get data-value attribute
            document.getElementById('dropdownButton').textContent = selectedValue; // Update button text
        });
    });

    // Multiselect
    /**document.querySelectorAll('.dropdown-menu input[type="checkbox"]').forEach((checkbox) => {
        checkbox.addEventListener('change', () => {
            const selectedOptions = Array.from(
                document.querySelectorAll('.dropdown-menu input[type="checkbox"]:checked')
            ).map((input) => input.value);

            const dropdownButton = document.getElementById('multiSelectDropdown');
            dropdownButton.textContent = selectedOptions.length ? selectedOptions.join(', ') : 'Select Options';
        });
    });**/

    // Data of search input
    const suggestions = <%- JSON.stringify(title) %>;

    // Search and Suggestion Logic
    const searchDocumentInput = document.getElementById('searchDocumentInput');
    const searchSuggestionsList = document.getElementById('searchSuggestionsList');

    searchDocumentInput.addEventListener('input', () => {
        const query = searchDocumentInput.value.toLowerCase().trim();
        searchSuggestionsList.innerHTML = '';

        if (query) {
            const filteredSuggestions = suggestions.filter(item => 
                item.toLowerCase().includes(query)
            );

            console.log(filteredSuggestions);

            if (filteredSuggestions.length > 0) {
                filteredSuggestions.forEach(item => {
                    const li = document.createElement('li');
                    li.textContent = item;
                    li.className = 'list-group-item fs-5';
                    li.addEventListener('click', () => {
                        searchDocumentInput.value = item;
                        searchSuggestionsList.style.display = 'none';
                    });
                    searchSuggestionsList.appendChild(li);
                });
                searchSuggestionsList.style.display = 'block';
            } else {
                searchSuggestionsList.style.display = 'none';
            }
        } else {
            searchSuggestionsList.style.display = 'none';
        }

        const inputWidth = searchDocumentInput.offsetWidth;
        searchSuggestionsList.style.width = `${inputWidth}px`;
        //suggestionsList.style.top = `${searchDocumentInput.offsetHeight}px`;
    });

    document.addEventListener('click', (event) => {
        if (!event.target.closest('.form-group')) {
            searchSuggestionsList.style.display = 'none';
        }
    });

    // Multi Select
    new Choices('#documentCategoryMultiSelect', {
        removeItemButton: true
    });

    new Choices('#documentActionRequestMultiSelect', {
        removeItemButton: true
    });

    // Insert Document Form Data
    document.getElementById('createDocumentForm').addEventListener('submit', async(event) => {
            event.preventDefault();

            const formData = new FormData(event.target);
  
            const data = Object.fromEntries(Array.from(formData.keys(), key => {
                const val = formData.getAll(key)
                return [ key, val.length > 1 ? val : val.pop() ]
            }))

            console.log(data);

            try {
                const response = await fetch('/api/document/insert', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });

                const result = await response.json();

                if(result.ok){
                    const successInfoToast = document.getElementById('successDocumentToast');
                    const successInfo = bootstrap.Toast.getOrCreateInstance(successInfoToast);
                    bootstrap.Modal.getInstance('#modalCreateNew').hide();
                    document.getElementById("createDocumentForm").reset();
                    successInfo.show();
                }else{
                    const failedInfoToast = document.getElementById('failedDocumentToast');
                    const failedInfo = bootstrap.Toast.getOrCreateInstance(failedInfoToast);
                    failedInfo.show();
                }
            } catch (error) {
                console.log("Error: " + error);
                alert("An error occured while submitting the form");
            }
        })


        $(document).ready( function () {
    $('#myTable').DataTable();
} );
</script>

<%- include('partials/footer') %>